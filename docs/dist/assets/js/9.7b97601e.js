(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{368:function(e,n,a){"use strict";a.r(n);var t=a(42),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"fastclick原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fastclick原理"}},[e._v("#")]),e._v(" fastClick原理")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000019281808",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考链接"),a("OutboundLink")],1)]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如果只需要对 iOS 9.3 以上的 WKWebView 做适配，那么强烈建议你不去使用。")])]),e._v(" "),a("li",[a("p",[e._v("解决方案: 通过以下可以hack的技巧，不添加 fastClick 也能修复延迟的问题 。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("禁用缩放")]),e._v(" `Chrome on Android (all versions) iOS 9.3")])])]),e._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[e._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("meta")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("viewport"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("user-scalable=no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n")])])]),a("ul",[a("li",[e._v("或者")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("  html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    touch"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("action"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" manipulation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// IE on Windows Phone")]),e._v("\n  html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    touch"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("action"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" manipulation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// IE11+")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ms"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("touch"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("action"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" manipulation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// IE10")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("`\n")])])]),a("ul",[a("li",[a("code",[e._v("WebView:")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("iOS WebView 就有点让人头疼了。因为 iOS 8 之前一直都是 UIWebView，\niOS 8 出了个新秀 WKWebView，那么 iOS 9.3 300ms 延迟的 BUG 修复到底干了啥呢？\n在客户端 iOS 小姐姐的帮助下，最终的测试结果是 UIWebView 300ms 延迟的问题到现在一直存在，\n哪怕是最新的 iOS 版本（这大概这就是为什么老外推荐使用 WKWebView 而非 UIWebView，估计是不想修 BUG 了吧 😂），\n但是 WKWebView 在 iOS 9.3 的时候将这个问题给修复了。\n")])])]),a("ul",[a("li",[a("strong",[e._v("也就是说 iOS 9.3 之前 WKWebView 仍然是存在 300ms ** 延迟的问题的")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("andriod 代码\n//notation: js file can only use this kind of comments\n//since comments will cause error when use in webview.loadurl,\n//comments will be remove by java use regexp\n(function() {\n    if (window.WebViewJavascriptBridge) {\n        return;\n    }\n\n    var messagingIframe;\n    var bizMessagingIframe;\n    var sendMessageQueue = [];\n    var receiveMessageQueue = [];\n    var messageHandlers = {};\n\n    var CUSTOM_PROTOCOL_SCHEME = 'yy';\n    var QUEUE_HAS_MESSAGE = '__QUEUE_MESSAGE__/';\n\n    var responseCallbacks = {};\n    var uniqueId = 1;\n\n    // 创建消息index队列iframe\n    function _createQueueReadyIframe(doc) {\n        messagingIframe = doc.createElement('iframe');\n        messagingIframe.style.display = 'none';\n        doc.documentElement.appendChild(messagingIframe);\n    }\n    //创建消息体队列iframe\n    function _createQueueReadyIframe4biz(doc) {\n        bizMessagingIframe = doc.createElement('iframe');\n        bizMessagingIframe.style.display = 'none';\n        doc.documentElement.appendChild(bizMessagingIframe);\n    }\n    //set default messageHandler  初始化默认的消息线程\n    function init(messageHandler) {\n        if (WebViewJavascriptBridge._messageHandler) {\n            throw new Error('WebViewJavascriptBridge.init called twice');\n        }\n        WebViewJavascriptBridge._messageHandler = messageHandler;\n        var receivedMessages = receiveMessageQueue;\n        receiveMessageQueue = null;\n        for (var i = 0; i < receivedMessages.length; i++) {\n            _dispatchMessageFromNative(receivedMessages[i]);\n        }\n    }\n\n    // 发送\n    function send(data, responseCallback) {\n        _doSend({\n            data: data\n        }, responseCallback);\n    }\n\n    // 注册线程 往数组里面添加值\n    function registerHandler(handlerName, handler) {\n        messageHandlers[handlerName] = handler;\n    }\n    // 调用线程\n    function callHandler(handlerName, data, responseCallback) {\n        _doSend({\n            handlerName: handlerName,\n            data: data\n        }, responseCallback);\n    }\n\n    //sendMessage add message, 触发native处理 sendMessage\n    function _doSend(message, responseCallback) {\n        if (responseCallback) {\n            var callbackId = 'cb_' + (uniqueId++) + '_' + new Date().getTime();\n            responseCallbacks[callbackId] = responseCallback;\n            message.callbackId = callbackId;\n        }\n\n        sendMessageQueue.push(message);\n        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;\n    }\n\n    // 提供给native调用,该函数作用:获取sendMessageQueue返回给native,由于android不能直接获取返回的内容,所以使用url shouldOverrideUrlLoading 的方式返回内容\n    function _fetchQueue() {\n        var messageQueueString = JSON.stringify(sendMessageQueue);\n        sendMessageQueue = [];\n        //android can't read directly the return data, so we can reload iframe src to communicate with java\n        if (messageQueueString !== '[]') {\n            bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://return/_fetchQueue/' + encodeURIComponent(messageQueueString);\n        }\n    }\n\n    //提供给native使用,\n    function _dispatchMessageFromNative(messageJSON) {\n        setTimeout(function() {\n            var message = JSON.parse(messageJSON);\n            var responseCallback;\n            //java call finished, now need to call js callback function\n            if (message.responseId) {\n                responseCallback = responseCallbacks[message.responseId];\n                if (!responseCallback) {\n                    return;\n                }\n                responseCallback(message.responseData);\n                delete responseCallbacks[message.responseId];\n            } else {\n                //直接发送\n                if (message.callbackId) {\n                    var callbackResponseId = message.callbackId;\n                    responseCallback = function(responseData) {\n                        _doSend({\n                            responseId: callbackResponseId,\n                            responseData: responseData\n                        });\n                    };\n                }\n\n                var handler = WebViewJavascriptBridge._messageHandler;\n                if (message.handlerName) {\n                    handler = messageHandlers[message.handlerName];\n                }\n                //查找指定handler\n                try {\n                    handler(message.data, responseCallback);\n                } catch (exception) {\n                    if (typeof console != 'undefined') {\n                        console.log(\"WebViewJavascriptBridge: WARNING: javascript handler threw.\", message, exception);\n                    }\n                }\n            }\n        });\n    }\n\n    //提供给native调用,receiveMessageQueue 在会在页面加载完后赋值为null,所以\n    function _handleMessageFromNative(messageJSON) {\n        console.log(messageJSON);\n        if (receiveMessageQueue) {\n            receiveMessageQueue.push(messageJSON);\n        }\n        _dispatchMessageFromNative(messageJSON);\n       \n    }\n\n    var WebViewJavascriptBridge = window.WebViewJavascriptBridge = {\n        init: init,\n        send: send,\n        registerHandler: registerHandler,\n        callHandler: callHandler,\n        _fetchQueue: _fetchQueue,\n        _handleMessageFromNative: _handleMessageFromNative\n    };\n\n    var doc = document;\n    _createQueueReadyIframe(doc);\n    _createQueueReadyIframe4biz(doc);\n    var readyEvent = doc.createEvent('Events');\n    readyEvent.initEvent('WebViewJavascriptBridgeReady');\n    readyEvent.bridge = WebViewJavascriptBridge;\n    doc.dispatchEvent(readyEvent);\n})();\n\n\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// This file contains the source for the Javascript side of the\n// WebViewJavascriptBridge. It is plaintext, but converted to an NSString\n// via some preprocessor tricks.\n//\n// Previous implementations of WebViewJavascriptBridge loaded the javascript source\n// from a resource. This worked fine for app developers, but library developers who\n// included the bridge into their library, awkwardly had to ask consumers of their\n// library to include the resource, violating their encapsulation. By including the\n// Javascript as a string resource, the encapsulation of the library is maintained.\n\n#import \"WebViewJavascriptBridge_JS.h\"\n\nNSString * WebViewJavascriptBridge_js() {\n\t#define __wvjb_js_func__(x) #x\n\t\n\t// BEGIN preprocessorJSCode\n\tstatic NSString * preprocessorJSCode = @__wvjb_js_func__(\n;(function() {\n\tif (window.WebViewJavascriptBridge) {\n\t\treturn;\n\t}\n\n\tif (!window.onerror) {\n\t\twindow.onerror = function(msg, url, line) {\n\t\t\tconsole.log(\"WebViewJavascriptBridge: ERROR:\" + msg + \"@\" + url + \":\" + line);\n\t\t}\n\t}\n\twindow.WebViewJavascriptBridge = {\n\t\tregisterHandler: registerHandler,\n\t\tcallHandler: callHandler,\n\t\tdisableJavscriptAlertBoxSafetyTimeout: disableJavscriptAlertBoxSafetyTimeout,\n\t\t_fetchQueue: _fetchQueue,\n\t\t_handleMessageFromObjC: _handleMessageFromObjC\n\t};\n\n\tvar messagingIframe;\n\tvar sendMessageQueue = [];\n\tvar messageHandlers = {};\n\t\n\tvar CUSTOM_PROTOCOL_SCHEME = 'https';\n\tvar QUEUE_HAS_MESSAGE = '__wvjb_queue_message__';\n\t\n\tvar responseCallbacks = {};\n\tvar uniqueId = 1;\n\tvar dispatchMessagesWithTimeoutSafety = true;\n\n\tfunction registerHandler(handlerName, handler) {\n\t\tmessageHandlers[handlerName] = handler;\n\t}\n\t\n\tfunction callHandler(handlerName, data, responseCallback) {\n\t\tif (arguments.length == 2 && typeof data == 'function') {\n\t\t\tresponseCallback = data;\n\t\t\tdata = null;\n\t\t}\n        console.log('applog:' + JSON.stringify(data));\n\t\t_doSend({ handlerName:handlerName, data:data }, responseCallback);\n\t}\n\tfunction disableJavscriptAlertBoxSafetyTimeout() {\n\t\tdispatchMessagesWithTimeoutSafety = false;\n\t}\n\t\n\tfunction _doSend(message, responseCallback) {\n\t\tif (responseCallback) {\n\t\t\tvar callbackId = 'cb_'+(uniqueId++)+'_'+new Date().getTime();\n\t\t\tresponseCallbacks[callbackId] = responseCallback;\n\t\t\tmessage['callbackId'] = callbackId;\n\t\t}\n\t\tsendMessageQueue.push(message);\n\t\tmessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;\n\t}\n\n\tfunction _fetchQueue() {\n\t\tvar messageQueueString = JSON.stringify(sendMessageQueue);\n        console.log('applog:' + messageQueueString);\n\t\tsendMessageQueue = [];\n\t\treturn messageQueueString;\n\t}\n\n\tfunction _dispatchMessageFromObjC(messageJSON) {\n\t\tif (dispatchMessagesWithTimeoutSafety) {\n\t\t\tsetTimeout(_doDispatchMessageFromObjC);\n\t\t} else {\n\t\t\t _doDispatchMessageFromObjC();\n\t\t}\n\t\t\n\t\tfunction _doDispatchMessageFromObjC() {\n\t\t\tvar message = JSON.parse(messageJSON);\n\t\t\tvar messageHandler;\n\t\t\tvar responseCallback;\n\n\t\t\tif (message.responseId) {\n\t\t\t\tresponseCallback = responseCallbacks[message.responseId];\n\t\t\t\tif (!responseCallback) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresponseCallback(message.responseData);\n\t\t\t\tdelete responseCallbacks[message.responseId];\n\t\t\t} else {\n\t\t\t\tif (message.callbackId) {\n\t\t\t\t\tvar callbackResponseId = message.callbackId;\n\t\t\t\t\tresponseCallback = function(responseData) {\n\t\t\t\t\t\t_doSend({ handlerName:message.handlerName, responseId:callbackResponseId, responseData:responseData });\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar handler = messageHandlers[message.handlerName];\n\t\t\t\tif (!handler) {\n\t\t\t\t\tconsole.log(\"WebViewJavascriptBridge: WARNING: no handler for message from ObjC:\", message);\n\t\t\t\t} else {\n\t\t\t\t\thandler(message.data, responseCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction _handleMessageFromObjC(messageJSON) {\n        _dispatchMessageFromObjC(messageJSON);\n\t}\n\n\tmessagingIframe = document.createElement('iframe');\n\tmessagingIframe.style.display = 'none';\n\tmessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;\n\tdocument.documentElement.appendChild(messagingIframe);\n\n\tregisterHandler(\"_disableJavascriptAlertBoxSafetyTimeout\", disableJavscriptAlertBoxSafetyTimeout);\n\t\n\tsetTimeout(_callWVJBCallbacks, 0);\n\tfunction _callWVJBCallbacks() {\n\t\tvar callbacks = window.WVJBCallbacks;\n\t\tdelete window.WVJBCallbacks;\n\t\tfor (var i=0; i<callbacks.length; i++) {\n\t\t\tcallbacks[i](WebViewJavascriptBridge);\n\t\t}\n\t}\n})();\n\t); // END preprocessorJSCode\n\n\t#undef __wvjb_js_func__\n\treturn preprocessorJSCode;\n};\n\n\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{364:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"三种基础数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三种基础数据结构"}},[a._v("#")]),a._v(" 三种基础数据结构")]),a._v(" "),s("h2",{attrs:{id:"栈-stack-、堆-heap-、队列-queue-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack-、堆-heap-、队列-queue-。"}},[a._v("#")]),a._v(" 栈( stack)、堆 (heap )、队列(queue)。")]),a._v(" "),s("h3",{attrs:{id:"栈-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[a._v("#")]),a._v(" 栈( stack)")]),a._v(" "),s("ul",[s("li",[a._v("场景1: 栈是一种数据结构，它表达的是数据的一种存取方式，这是一种理论基础。")]),a._v(" "),s("li",[a._v("场景2: 栈可用来规定代码的执行顺序，在 JavaScript 中叫作函数调用栈( call stack )，它是根据栈数据结构理论而实现的一种实践。")]),a._v(" "),s("li",[a._v("总结为先进后出，后进先出 ( LIFO , Last In, First Out )。\n"),s("img",{attrs:{src:"//app-test.h5.ihaozhuo.com/zgm/images/311597287563_.pic_hd.jpg",alt:""}})])]),a._v(" "),s("h3",{attrs:{id:"堆-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[a._v("#")]),a._v(" 堆 (heap )")]),a._v(" "),s("blockquote",[s("p",[a._v("堆数据结构通常是一种树状结构。它的存取方式与在书架中取书的方式非常相似。\n书虽然整齐地摆放在书架上，但是只要知道 书的名字，在书架中找到它之后就可以很方便地取出，我们甚至不用关心书的存放顺序。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"//app-test.h5.ihaozhuo.com/zgm/images/301597287457_.pic_hd.jpg",alt:""}})]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" heap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    b"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    c"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("110")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 当我们想要访问 a 时，只需通过 heap.a 来访问即可，而不用关心 a、 b、 c 的具体顺序 。")]),a._v("\n")])])]),s("h3",{attrs:{id:"队列-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[a._v("#")]),a._v(" 队列(queue)")]),a._v(" "),s("blockquote",[s("p",[a._v("队列是一种先进先出的（FIFO）的数据结构。 正如排队过安检一样，排在队伍前面 的人一定是最先过安检的人 。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"//app-test.h5.ihaozhuo.com/zgm/images/291597287250_.pic.jpg",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);